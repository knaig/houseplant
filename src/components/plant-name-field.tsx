'use client';

import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { 
  generateSmartSuggestions, 
  validatePlantName, 
  isNameUnique,
  normalizePlantName,
  getRandomSuggestion
} from '@/lib/name-generator';
import { CheckCircle, XCircle, RefreshCw, Sparkles } from 'lucide-react';

interface PlantNameFieldProps {
  value: string;
  onChange: (value: string) => void;
  speciesCommonName?: string;
  personality?: string;
  disabled?: boolean;
  placeholder?: string;
  className?: string;
}

interface ValidationState {
  valid: boolean;
  message?: string;
}

export const PlantNameField = React.memo(function PlantNameField({
  value,
  onChange,
  speciesCommonName,
  personality,
  disabled = false,
  placeholder = "Enter a fun name for your plant...",
  className = ""
}: PlantNameFieldProps) {
  console.log('üîç PlantNameField render with props:', { value, speciesCommonName, personality });
  const [suggestions, setSuggestions] = useState<string[]>([]);
  const [existingNames, setExistingNames] = useState<string[]>([]);
  const [validationState, setValidationState] = useState<ValidationState>({ valid: true });
  const [showSuggestions, setShowSuggestions] = useState(true);
  const [loading, setLoading] = useState(false);
  const [isGeneratingSuggestions, setIsGeneratingSuggestions] = useState(false);
  const [autoGenerated, setAutoGenerated] = useState(false);

  // Auto-generate name when species is selected and no name is set
  useEffect(() => {
    if (speciesCommonName && !value.trim() && !autoGenerated) {
      console.log('üîç Auto-generating name for species:', speciesCommonName);
      generateAutoName();
    }
  }, [speciesCommonName, value, autoGenerated]);

  const generateAutoName = useCallback(async () => {
    if (!speciesCommonName) return;
    
    setIsGeneratingSuggestions(true);
    try {
      // Generate smart suggestions
      const smartSuggestions = await generateSmartSuggestions(
        speciesCommonName,
        personality || 'FUNNY'
      );
      
      if (smartSuggestions.length > 0) {
        const autoName = smartSuggestions[0]; // Use the first suggestion
        console.log('üîç Auto-generated name:', autoName);
        onChange(autoName);
        setAutoGenerated(true);
        setSuggestions(smartSuggestions.slice(1)); // Keep remaining suggestions
        setShowSuggestions(true);
      }
    } catch (error) {
      console.error('Error auto-generating name:', error);
    } finally {
      setIsGeneratingSuggestions(false);
    }
  }, [speciesCommonName, personality, existingNames, onChange]);

  // Fetch existing plant names on component mount
  useEffect(() => {
    const fetchExistingNames = async () => {
      try {
        setLoading(true);
        const response = await fetch('/api/user/plants/names');
        if (response.ok) {
          const data = await response.json();
          setExistingNames(data.names || []);
        } else if (response.status === 401) {
          // User not authenticated, that's fine for claim flow
          setExistingNames([]);
        }
      } catch (error) {
        console.error('Error fetching existing names:', error);
        // Don't fail the component if we can't fetch names
        setExistingNames([]);
      } finally {
        setLoading(false);
      }
    };

    fetchExistingNames();
  }, []);

  const generateNewSuggestions = useCallback(() => {
    setIsGeneratingSuggestions(true);
    try {
      const newSuggestions = generateSmartSuggestions(speciesCommonName, personality);
      // Filter out existing names to avoid duplicates
      const filteredSuggestions = newSuggestions.filter(suggestion => 
        !existingNames.includes(normalizePlantName(suggestion))
      );
      setSuggestions(filteredSuggestions);
    } catch (error) {
      console.error('Error generating suggestions:', error);
    } finally {
      setIsGeneratingSuggestions(false);
    }
  }, [speciesCommonName, personality, existingNames]);

  // Generate initial suggestions - only when species/personality actually changes
  useEffect(() => {
    // Only generate suggestions if we don't have a current value and species is selected
    if (speciesCommonName && !value.trim()) {
      const timeoutId = setTimeout(() => {
        generateNewSuggestions();
      }, 1000); // Longer delay to avoid interfering with user input
      
      return () => clearTimeout(timeoutId);
    }
  }, [speciesCommonName, personality, value, generateNewSuggestions]);

  // Debounced validation
  useEffect(() => {
    if (!value.trim()) {
      setValidationState({ valid: true });
      return;
    }

    const timeoutId = setTimeout(() => {
      validateName(value);
    }, 300);

    return () => clearTimeout(timeoutId);
  }, [value, existingNames]);

  const validateName = (name: string) => {
    const normalizedName = normalizePlantName(name);
    
    // Check format validation
    const formatValidation = validatePlantName(normalizedName);
    if (!formatValidation.valid) {
      setValidationState({
        valid: false,
        message: formatValidation.reason
      });
      return;
    }

    // Check uniqueness
    if (!isNameUnique(normalizedName, existingNames)) {
      setValidationState({
        valid: false,
        message: `You already have a plant named "${normalizedName}"`
      });
      return;
    }

    setValidationState({ valid: true });
  };

  const handleSuggestionClick = (suggestion: string) => {
    const normalizedSuggestion = normalizePlantName(suggestion);
    onChange(normalizedSuggestion);
    setAutoGenerated(false); // User manually selected a suggestion
    setShowSuggestions(false);
  };

  const handleRandomSuggestion = () => {
    const randomSuggestion = getRandomSuggestion(speciesCommonName, personality);
    const normalizedSuggestion = normalizePlantName(randomSuggestion);
    onChange(normalizedSuggestion);
    setAutoGenerated(false); // User manually selected a random suggestion
  };

  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    const newValue = e.target.value;
    console.log('üîç PlantNameField handleInputChange called with:', newValue);
    console.log('üîç PlantNameField current value prop:', value);
    
    // Reset auto-generated flag if user manually changes the name
    if (autoGenerated && newValue !== value) {
      setAutoGenerated(false);
    }
    
    onChange(newValue);
    // Don't automatically show suggestions when typing
    // setShowSuggestions(true);
  }, [onChange, value, autoGenerated]);

  const handleInputFocus = () => {
    // Only show suggestions if we have them and no current value
    if (suggestions.length > 0 && !value.trim()) {
      setShowSuggestions(true);
    }
  };

  const handleRefreshSuggestions = () => {
    generateNewSuggestions();
  };

  return (
    <div className={`space-y-3 sm:space-y-4 ${className}`}>
      {/* Input field with validation feedback */}
      <div className="relative">
        <div className="relative">
          <Input
            value={value}
            onChange={handleInputChange}
            onFocus={handleInputFocus}
            placeholder={placeholder}
            disabled={disabled || loading}
            className={`pr-10 h-14 text-base ${validationState.valid ? 'border-green-500' : 'border-red-500'}`}
          />
          {/* Validation icon */}
          <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
            {loading ? (
              <RefreshCw className="h-4 w-4 animate-spin text-gray-400" />
            ) : validationState.valid && value.trim() ? (
              <CheckCircle className="h-4 w-4 text-green-500" />
            ) : !validationState.valid && value.trim() ? (
              <XCircle className="h-4 w-4 text-red-500" />
            ) : null}
          </div>
        </div>

        {/* Validation message */}
        {validationState.message && (
          <p className={`text-xs sm:text-sm mt-1 ${
            validationState.valid ? 'text-green-600' : 'text-red-600'
          }`}>
            {validationState.message}
          </p>
        )}

        {/* Auto-generated indicator and regenerate button */}
        {value.trim() && autoGenerated && (
          <div className="flex items-center justify-between mt-2">
            <div className="flex items-center gap-2">
              <Sparkles className="h-3 w-3 text-blue-500" />
              <span className="text-xs text-blue-600">Auto-generated name</span>
            </div>
            <Button
              variant="ghost"
              size="sm"
              onClick={generateAutoName}
              disabled={disabled || isGeneratingSuggestions}
              className="text-xs h-6 px-2 text-blue-600 hover:text-blue-700"
            >
              {isGeneratingSuggestions ? (
                <RefreshCw className="h-3 w-3 animate-spin" />
              ) : (
                <RefreshCw className="h-3 w-3" />
              )}
              <span className="ml-1">New</span>
            </Button>
          </div>
        )}
      </div>

      {/* Manual suggestions trigger */}
      {speciesCommonName && !value.trim() && (
        <div className="flex justify-center">
          <Button
            variant="outline"
            size="sm"
            onClick={() => {
              generateNewSuggestions();
              setShowSuggestions(true);
            }}
            disabled={disabled || isGeneratingSuggestions}
            className="text-sm text-gray-600 hover:text-green-600 h-12 px-6 touch-manipulation"
          >
            {isGeneratingSuggestions ? (
              <RefreshCw className="h-3 w-3 animate-spin mr-1" />
            ) : (
              <Sparkles className="h-3 w-3 mr-1" />
            )}
            <span className="hidden sm:inline">Get name suggestions for {speciesCommonName}</span>
            <span className="sm:hidden">Get suggestions</span>
          </Button>
        </div>
      )}

      {/* Suggestions section */}
      {showSuggestions && suggestions.length > 0 && (
        <div className="space-y-3">
          <div className="flex items-center justify-between">
            <h4 className="text-sm font-medium text-gray-700 flex items-center gap-2">
              <Sparkles className="h-4 w-4" />
              <span className="hidden sm:inline">Name Suggestions</span>
              <span className="sm:hidden">Suggestions</span>
            </h4>
            <Button
              variant="outline"
              size="sm"
              onClick={handleRefreshSuggestions}
              disabled={isGeneratingSuggestions}
              className="text-xs h-8 px-2"
            >
              {isGeneratingSuggestions ? (
                <RefreshCw className="h-3 w-3 animate-spin" />
              ) : (
                <RefreshCw className="h-3 w-3" />
              )}
            </Button>
          </div>

          {/* Suggestion pills - Mobile optimized */}
          <div className="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-2">
            {suggestions.map((suggestion, index) => (
              <Button
                key={`${suggestion}-${index}`}
                variant="outline"
                size="sm"
                onClick={() => handleSuggestionClick(suggestion)}
                disabled={disabled}
                className="text-sm h-12 hover:bg-green-50 hover:border-green-300 hover:text-green-700 transition-colors touch-manipulation"
              >
                {suggestion}
              </Button>
            ))}
          </div>

          {/* Random suggestion button */}
          <div className="flex justify-center">
            <Button
              variant="ghost"
              size="sm"
              onClick={handleRandomSuggestion}
              disabled={disabled}
              className="text-sm text-gray-600 hover:text-green-600 h-12 px-6 touch-manipulation"
            >
              üé≤ <span className="hidden sm:inline">Surprise me with a random name</span>
              <span className="sm:hidden">Random name</span>
            </Button>
          </div>
        </div>
      )}

      {/* Help text */}
      <div className="text-sm text-gray-500 space-y-2">
        <p>‚Ä¢ <span className="font-medium text-blue-600">Auto-generated</span> when you select a species</p>
        <p>‚Ä¢ Choose from suggestions or create your own unique name</p>
        <p>‚Ä¢ Names must be 2-50 characters and unique in your collection</p>
        {speciesCommonName && (
          <p>‚Ä¢ Suggestions are tailored to your {speciesCommonName}</p>
        )}
        {personality && (
          <p>‚Ä¢ Names match your {personality.toLowerCase()} personality</p>
        )}
      </div>
    </div>
  );
});
