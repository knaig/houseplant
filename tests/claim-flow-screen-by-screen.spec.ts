import { test, expect } from '@playwright/test';

test.describe('Claim Flow - Screen by Screen Tests', () => {
  test('should complete full claim flow with automated naming', async ({ page }) => {
    // Use a valid token from the database
    const validToken = 'n7sqi8wlvlpalq2haj83';
    
    console.log('🔍 Starting screen-by-screen test...');
    
    // Screen 1: Navigate to claim page
    console.log('📱 Screen 1: Navigating to claim page...');
    await page.goto(`/claim?token=${validToken}`);
    await page.waitForLoadState('networkidle');
    
    // Take screenshot of initial page
    await page.screenshot({ path: 'test-results/screen-1-initial-page.png' });
    
    // Verify we see the claim form structure
    await expect(page.locator('text=Claim Your Plant')).toBeVisible();
    await expect(page.locator('text=Plant Name *')).toBeVisible();
    await expect(page.locator('text=Plant Species *')).toBeVisible();
    
    console.log('✅ Screen 1: Claim form loaded successfully');
    
    // Screen 2: Check initial state (no name, no species selected)
    console.log('📱 Screen 2: Checking initial state...');
    
    // Verify plant name field is empty
    const nameInput = page.locator('input[placeholder*="Choose a fun name"]');
    await expect(nameInput).toHaveValue('');
    
    // Verify species dropdown is empty
    const speciesSelect = page.locator('[role="combobox"]').first();
    await expect(speciesSelect).toContainText('Select your plant species');
    
    // Take screenshot of empty form
    await page.screenshot({ path: 'test-results/screen-2-empty-form.png' });
    
    console.log('✅ Screen 2: Initial empty state verified');
    
    // Screen 3: Select a plant species
    console.log('📱 Screen 3: Selecting plant species...');
    
    // Click on species dropdown
    await speciesSelect.click();
    await page.waitForTimeout(500);
    
    // Take screenshot of dropdown open
    await page.screenshot({ path: 'test-results/screen-3-species-dropdown.png' });
    
    // Select first available species
    const firstSpecies = page.locator('[role="option"]').first();
    await expect(firstSpecies).toBeVisible();
    const speciesName = await firstSpecies.textContent();
    console.log('🔍 Selected species:', speciesName);
    
    await firstSpecies.click();
    await page.waitForTimeout(1000); // Wait for auto-generation
    
    // Take screenshot after species selection
    await page.screenshot({ path: 'test-results/screen-4-species-selected.png' });
    
    console.log('✅ Screen 3: Species selected successfully');
    
    // Screen 4: Verify automated name generation
    console.log('📱 Screen 4: Verifying automated name generation...');
    
    // Check if name was auto-generated
    const nameValue = await nameInput.inputValue();
    console.log('🔍 Auto-generated name:', nameValue);
    
    // Verify name is not empty
    expect(nameValue.length).toBeGreaterThan(0);
    
    // Check for auto-generated indicator
    const autoGeneratedIndicator = page.locator('text=Auto-generated name');
    await expect(autoGeneratedIndicator).toBeVisible();
    
    // Check for regenerate button
    const regenerateButton = page.locator('button:has-text("New")');
    await expect(regenerateButton).toBeVisible();
    
    // Take screenshot showing auto-generated name
    await page.screenshot({ path: 'test-results/screen-5-auto-generated-name.png' });
    
    console.log('✅ Screen 4: Automated naming verified');
    
    // Screen 5: Test regenerate functionality
    console.log('📱 Screen 5: Testing regenerate functionality...');
    
    const originalName = nameValue;
    await regenerateButton.click();
    await page.waitForTimeout(1000);
    
    const newName = await nameInput.inputValue();
    console.log('🔍 New generated name:', newName);
    
    // Verify name changed
    expect(newName).not.toBe(originalName);
    expect(newName.length).toBeGreaterThan(0);
    
    // Take screenshot after regeneration
    await page.screenshot({ path: 'test-results/screen-6-regenerated-name.png' });
    
    console.log('✅ Screen 5: Regenerate functionality verified');
    
    // Screen 6: Test user override (manual typing)
    console.log('📱 Screen 6: Testing user override...');
    
    // Clear the field and type custom name
    await nameInput.clear();
    await nameInput.fill('My Custom Plant');
    await page.waitForTimeout(500);
    
    // Verify auto-generated indicator disappears
    await expect(autoGeneratedIndicator).not.toBeVisible();
    
    // Take screenshot of custom name
    await page.screenshot({ path: 'test-results/screen-7-custom-name.png' });
    
    console.log('✅ Screen 6: User override verified');
    
    // Screen 7: Fill out remaining form fields
    console.log('📱 Screen 7: Filling remaining form fields...');
    
    // Fill pot size
    const potSizeInput = page.locator('input[type="number"]');
    await potSizeInput.fill('15');
    
    // Select light level
    const lightLevelSelect = page.locator('[role="combobox"]').nth(1);
    await lightLevelSelect.click();
    await page.locator('[role="option"]:has-text("Medium Light")').click();
    
    // Fill location
    const locationInput = page.locator('input[placeholder*="Living room"]');
    await locationInput.fill('Kitchen window');
    
    // Select personality
    const personalitySelect = page.locator('[role="combobox"]').nth(2);
    await personalitySelect.click();
    await page.locator('[role="option"]:has-text("Zen")').click();
    
    // Fill last watered date
    const lastWateredInput = page.locator('input[type="date"]');
    await lastWateredInput.fill('2025-09-28');
    
    // Take screenshot of completed form
    await page.screenshot({ path: 'test-results/screen-8-completed-form.png' });
    
    console.log('✅ Screen 7: Form completed successfully');
    
    // Screen 8: Verify form validation and submit button
    console.log('📱 Screen 8: Verifying form validation...');
    
    // Check submit button is enabled
    const submitButton = page.locator('button:has-text("Claim My Plant")');
    await expect(submitButton).toBeEnabled();
    
    // Take screenshot of ready-to-submit form
    await page.screenshot({ path: 'test-results/screen-9-ready-to-submit.png' });
    
    console.log('✅ Screen 8: Form validation passed');
    
    // Screen 9: Test suggestions functionality
    console.log('📱 Screen 9: Testing suggestions functionality...');
    
    // Clear name to test suggestions
    await nameInput.clear();
    await page.waitForTimeout(500);
    
    // Look for suggestions trigger button
    const suggestionsButton = page.locator('button:has-text("Get suggestions")');
    if (await suggestionsButton.isVisible()) {
      await suggestionsButton.click();
      await page.waitForTimeout(1000);
      
      // Check if suggestions appear
      const suggestionPills = page.locator('button[class*="hover:bg-green-50"]');
      const suggestionCount = await suggestionPills.count();
      
      if (suggestionCount > 0) {
        console.log(`🔍 Found ${suggestionCount} suggestions`);
        
        // Click first suggestion
        await suggestionPills.first().click();
        await page.waitForTimeout(500);
        
        const suggestedName = await nameInput.inputValue();
        console.log('🔍 Selected suggestion:', suggestedName);
        expect(suggestedName.length).toBeGreaterThan(0);
      }
    }
    
    // Take screenshot of suggestions
    await page.screenshot({ path: 'test-results/screen-10-suggestions.png' });
    
    console.log('✅ Screen 9: Suggestions functionality verified');
    
    // Screen 10: Final form state
    console.log('📱 Screen 10: Final form state...');
    
    // Ensure we have a valid name
    const finalName = await nameInput.inputValue();
    if (!finalName) {
      await nameInput.fill('Final Test Plant');
    }
    
    // Take final screenshot
    await page.screenshot({ path: 'test-results/screen-11-final-state.png' });
    
    console.log('✅ Screen 10: Final state verified');
    
    // Verify all required fields are filled
    await expect(nameInput).toHaveValue(/.+/);
    await expect(speciesSelect).not.toContainText('Select your plant species');
    await expect(potSizeInput).toHaveValue('15');
    await expect(lastWateredInput).toHaveValue('2025-09-28');
    
    console.log('🎉 Screen-by-screen test completed successfully!');
  });

  test('should test mobile responsiveness', async ({ page }) => {
    // Set mobile viewport
    await page.setViewportSize({ width: 375, height: 667 });
    
    console.log('📱 Testing mobile responsiveness...');
    
    const validToken = 'n7sqi8wlvlpalq2haj83';
    await page.goto(`/claim?token=${validToken}`);
    await page.waitForLoadState('networkidle');
    
    // Take mobile screenshot
    await page.screenshot({ path: 'test-results/mobile-1-initial.png' });
    
    // Verify mobile layout elements
    await expect(page.locator('text=Claim Your Plant')).toBeVisible();
    
    // Check if form is properly sized for mobile
    const card = page.locator('[class*="max-w-lg"]');
    await expect(card).toBeVisible();
    
    // Test mobile interactions
    const speciesSelect = page.locator('[role="combobox"]').first();
    await speciesSelect.click();
    await page.waitForTimeout(500);
    
    // Take screenshot of mobile dropdown
    await page.screenshot({ path: 'test-results/mobile-2-dropdown.png' });
    
    // Select species
    await page.locator('[role="option"]').first().click();
    await page.waitForTimeout(1000);
    
    // Take screenshot of mobile with auto-generated name
    await page.screenshot({ path: 'test-results/mobile-3-auto-name.png' });
    
    // Verify mobile-specific elements
    const autoIndicator = page.locator('text=Auto-generated name');
    await expect(autoIndicator).toBeVisible();
    
    const regenerateButton = page.locator('button:has-text("New")');
    await expect(regenerateButton).toBeVisible();
    
    console.log('✅ Mobile responsiveness verified');
  });

  test('should test different personality-based naming', async ({ page }) => {
    console.log('📱 Testing personality-based naming...');
    
    const validToken = 'n7sqi8wlvlpalq2haj83';
    await page.goto(`/claim?token=${validToken}`);
    await page.waitForLoadState('networkidle');
    
    // Select species first
    const speciesSelect = page.locator('[role="combobox"]').first();
    await speciesSelect.click();
    await page.locator('[role="option"]').first().click();
    await page.waitForTimeout(1000);
    
    // Test different personalities
    const personalities = ['FUNNY', 'ZEN', 'COACH', 'CLASSIC'];
    
    for (let i = 0; i < personalities.length; i++) {
      const personality = personalities[i];
      console.log(`🔍 Testing ${personality} personality...`);
      
      // Select personality
      const personalitySelect = page.locator('[role="combobox"]').nth(2);
      await personalitySelect.click();
      await page.locator(`[role="option"]:has-text("${personality}")`).click();
      await page.waitForTimeout(500);
      
      // Clear name and regenerate
      const nameInput = page.locator('input[placeholder*="Choose a fun name"]');
      await nameInput.clear();
      await page.waitForTimeout(500);
      
      // Trigger auto-generation by selecting species again
      await speciesSelect.click();
      await page.locator('[role="option"]').first().click();
      await page.waitForTimeout(1000);
      
      const generatedName = await nameInput.inputValue();
      console.log(`🔍 ${personality} generated name:`, generatedName);
      
      // Take screenshot for each personality
      await page.screenshot({ path: `test-results/personality-${personality.toLowerCase()}.png` });
      
      expect(generatedName.length).toBeGreaterThan(0);
    }
    
    console.log('✅ Personality-based naming verified');
  });
});
